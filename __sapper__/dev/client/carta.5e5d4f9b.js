import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as create_slot, v as validate_slots, e as element, a as space, b as claim_element, f as children, h as detach_dev, j as claim_space, l as add_location, k as attr_dev, m as insert_dev, n as append_dev, o as get_slot_context, p as get_slot_changes, q as transition_in, r as transition_out, u as create_component, w as claim_component, x as mount_component, y as destroy_component, t as text, g as claim_text, z as noop, A as query_selector_all } from './client.c7542b5a.js';

/* src/components/tienda/Card.svelte generated by Svelte v3.22.2 */

const file = "src/components/tienda/Card.svelte";
const get_cardButtom_slot_changes = dirty => ({});
const get_cardButtom_slot_context = ctx => ({});
const get_cardPharagraph_slot_changes = dirty => ({});
const get_cardPharagraph_slot_context = ctx => ({});
const get_cardTitle_slot_changes = dirty => ({});
const get_cardTitle_slot_context = ctx => ({});
const get_cardImage_slot_changes = dirty => ({});
const get_cardImage_slot_context = ctx => ({});

function create_fragment(ctx) {
	let div4;
	let div3;
	let div0;
	let t0;
	let div1;
	let h3;
	let t1;
	let p;
	let t2;
	let div2;
	let button;
	let current;
	const cardImage_slot_template = /*$$slots*/ ctx[1].cardImage;
	const cardImage_slot = create_slot(cardImage_slot_template, ctx, /*$$scope*/ ctx[0], get_cardImage_slot_context);
	const cardTitle_slot_template = /*$$slots*/ ctx[1].cardTitle;
	const cardTitle_slot = create_slot(cardTitle_slot_template, ctx, /*$$scope*/ ctx[0], get_cardTitle_slot_context);
	const cardPharagraph_slot_template = /*$$slots*/ ctx[1].cardPharagraph;
	const cardPharagraph_slot = create_slot(cardPharagraph_slot_template, ctx, /*$$scope*/ ctx[0], get_cardPharagraph_slot_context);
	const cardButtom_slot_template = /*$$slots*/ ctx[1].cardButtom;
	const cardButtom_slot = create_slot(cardButtom_slot_template, ctx, /*$$scope*/ ctx[0], get_cardButtom_slot_context);

	const block = {
		c: function create() {
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			if (cardImage_slot) cardImage_slot.c();
			t0 = space();
			div1 = element("div");
			h3 = element("h3");
			if (cardTitle_slot) cardTitle_slot.c();
			t1 = space();
			p = element("p");
			if (cardPharagraph_slot) cardPharagraph_slot.c();
			t2 = space();
			div2 = element("div");
			button = element("button");
			if (cardButtom_slot) cardButtom_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", {});
			var div0_nodes = children(div0);
			if (cardImage_slot) cardImage_slot.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", {});
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			if (cardTitle_slot) cardTitle_slot.l(h3_nodes);
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", {});
			var p_nodes = children(p);
			if (cardPharagraph_slot) cardPharagraph_slot.l(p_nodes);
			p_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", {});
			var div2_nodes = children(div2);
			button = claim_element(div2_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			if (cardButtom_slot) cardButtom_slot.l(button_nodes);
			button_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div0, file, 2, 8, 121);
			attr_dev(h3, "class", "font-bold ");
			add_location(h3, file, 8, 12, 267);
			add_location(p, file, 13, 12, 432);
			add_location(div1, file, 7, 8, 249);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "p-4 m-4 text-gray-50 font-bold shadow-lg  bg-gradient-to-r from-green-400 to-blue-500 hover:from-pink-500 hover:to-yellow-500 rounded");
			add_location(button, file, 20, 12, 610);
			add_location(div2, file, 19, 8, 592);
			attr_dev(div3, "class", "grid  grid-rows-2 gap-4 m-4 p-4 shadow-lg place-items-center ");
			add_location(div3, file, 1, 4, 37);
			attr_dev(div4, "class", "place-items-center");
			add_location(div4, file, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div3);
			append_dev(div3, div0);

			if (cardImage_slot) {
				cardImage_slot.m(div0, null);
			}

			append_dev(div3, t0);
			append_dev(div3, div1);
			append_dev(div1, h3);

			if (cardTitle_slot) {
				cardTitle_slot.m(h3, null);
			}

			append_dev(div1, t1);
			append_dev(div1, p);

			if (cardPharagraph_slot) {
				cardPharagraph_slot.m(p, null);
			}

			append_dev(div3, t2);
			append_dev(div3, div2);
			append_dev(div2, button);

			if (cardButtom_slot) {
				cardButtom_slot.m(button, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (cardImage_slot) {
				if (cardImage_slot.p && dirty & /*$$scope*/ 1) {
					cardImage_slot.p(get_slot_context(cardImage_slot_template, ctx, /*$$scope*/ ctx[0], get_cardImage_slot_context), get_slot_changes(cardImage_slot_template, /*$$scope*/ ctx[0], dirty, get_cardImage_slot_changes));
				}
			}

			if (cardTitle_slot) {
				if (cardTitle_slot.p && dirty & /*$$scope*/ 1) {
					cardTitle_slot.p(get_slot_context(cardTitle_slot_template, ctx, /*$$scope*/ ctx[0], get_cardTitle_slot_context), get_slot_changes(cardTitle_slot_template, /*$$scope*/ ctx[0], dirty, get_cardTitle_slot_changes));
				}
			}

			if (cardPharagraph_slot) {
				if (cardPharagraph_slot.p && dirty & /*$$scope*/ 1) {
					cardPharagraph_slot.p(get_slot_context(cardPharagraph_slot_template, ctx, /*$$scope*/ ctx[0], get_cardPharagraph_slot_context), get_slot_changes(cardPharagraph_slot_template, /*$$scope*/ ctx[0], dirty, get_cardPharagraph_slot_changes));
				}
			}

			if (cardButtom_slot) {
				if (cardButtom_slot.p && dirty & /*$$scope*/ 1) {
					cardButtom_slot.p(get_slot_context(cardButtom_slot_template, ctx, /*$$scope*/ ctx[0], get_cardButtom_slot_context), get_slot_changes(cardButtom_slot_template, /*$$scope*/ ctx[0], dirty, get_cardButtom_slot_changes));
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardImage_slot, local);
			transition_in(cardTitle_slot, local);
			transition_in(cardPharagraph_slot, local);
			transition_in(cardButtom_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardImage_slot, local);
			transition_out(cardTitle_slot, local);
			transition_out(cardPharagraph_slot, local);
			transition_out(cardButtom_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
			if (cardImage_slot) cardImage_slot.d(detaching);
			if (cardTitle_slot) cardTitle_slot.d(detaching);
			if (cardPharagraph_slot) cardPharagraph_slot.d(detaching);
			if (cardButtom_slot) cardButtom_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Card> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Card", $$slots, ['cardImage','cardTitle','cardPharagraph','cardButtom']);

	$$self.$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, $$slots];
}

class Card extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Card",
			options,
			id: create_fragment.name
		});
	}
}

/* src/components/tienda/Cards.svelte generated by Svelte v3.22.2 */
const file$1 = "src/components/tienda/Cards.svelte";

// (9:8) <span slot="cardImage">
function create_cardImage_slot_2(ctx) {
	let span;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			span = element("span");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);

			img = claim_element(span_nodes, "IMG", {
				src: true,
				alt: true,
				width: true,
				height: true
			});

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "small.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "caja");
			attr_dev(img, "width", "70");
			attr_dev(img, "height", "70");
			add_location(img, file$1, 8, 32, 212);
			attr_dev(span, "slot", "cardImage");
			add_location(span, file$1, 8, 8, 188);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, img);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardImage_slot_2.name,
		type: "slot",
		source: "(9:8) <span slot=\\\"cardImage\\\">",
		ctx
	});

	return block;
}

// (10:8) <span slot="cardTitle">
function create_cardTitle_slot_2(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Tienda S");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Tienda S");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardTitle");
			add_location(span, file$1, 9, 8, 285);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardTitle_slot_2.name,
		type: "slot",
		source: "(10:8) <span slot=\\\"cardTitle\\\">",
		ctx
	});

	return block;
}

// (11:8) <span slot="cardPharagraph">
function create_cardPharagraph_slot_2(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Lorem ipsum dolor sit amet consectetur, adipisicing elit. Laborum\n            natus ut animi qui ab? Culpa excepturi doloremque accusamus beatae\n            qui, odio est repudiandae vitae aperiam cumque tenetur hic neque\n            obcaecati.");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Laborum\n            natus ut animi qui ab? Culpa excepturi doloremque accusamus beatae\n            qui, odio est repudiandae vitae aperiam cumque tenetur hic neque\n            obcaecati.");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardPharagraph");
			add_location(span, file$1, 10, 8, 332);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardPharagraph_slot_2.name,
		type: "slot",
		source: "(11:8) <span slot=\\\"cardPharagraph\\\">",
		ctx
	});

	return block;
}

// (16:8) <span slot="cardButtom">
function create_cardButtom_slot_2(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Comprar");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Comprar");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardButtom");
			add_location(span, file$1, 15, 8, 633);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardButtom_slot_2.name,
		type: "slot",
		source: "(16:8) <span slot=\\\"cardButtom\\\">",
		ctx
	});

	return block;
}

// (8:4) <Card  >
function create_default_slot_2(ctx) {
	let t0;
	let t1;
	let t2;

	const block = {
		c: function create() {
			t0 = space();
			t1 = space();
			t2 = space();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			t1 = claim_space(nodes);
			t2 = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(t2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(8:4) <Card  >",
		ctx
	});

	return block;
}

// (19:8) <span slot="cardImage">
function create_cardImage_slot_1(ctx) {
	let span;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			span = element("span");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);

			img = claim_element(span_nodes, "IMG", {
				src: true,
				alt: true,
				width: true,
				height: true
			});

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "medium.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "caja");
			attr_dev(img, "width", "70");
			attr_dev(img, "height", "70");
			add_location(img, file$1, 18, 32, 727);
			attr_dev(span, "slot", "cardImage");
			add_location(span, file$1, 18, 8, 703);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, img);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardImage_slot_1.name,
		type: "slot",
		source: "(19:8) <span slot=\\\"cardImage\\\">",
		ctx
	});

	return block;
}

// (20:8) <span slot="cardTitle">
function create_cardTitle_slot_1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Tienda M");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Tienda M");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardTitle");
			add_location(span, file$1, 19, 8, 801);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardTitle_slot_1.name,
		type: "slot",
		source: "(20:8) <span slot=\\\"cardTitle\\\">",
		ctx
	});

	return block;
}

// (21:8) <span slot="cardPharagraph">
function create_cardPharagraph_slot_1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Lorem ipsum dolor sit amet consectetur, adipisicing elit. Laborum\n            natus ut animi qui ab? Culpa excepturi doloremque accusamus beatae\n            qui, odio est repudiandae vitae aperiam cumque tenetur hic neque\n            obcaecati.");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Laborum\n            natus ut animi qui ab? Culpa excepturi doloremque accusamus beatae\n            qui, odio est repudiandae vitae aperiam cumque tenetur hic neque\n            obcaecati.");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardPharagraph");
			add_location(span, file$1, 20, 8, 848);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardPharagraph_slot_1.name,
		type: "slot",
		source: "(21:8) <span slot=\\\"cardPharagraph\\\">",
		ctx
	});

	return block;
}

// (26:8) <span slot="cardButtom">
function create_cardButtom_slot_1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Comprar");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Comprar");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardButtom");
			add_location(span, file$1, 25, 8, 1149);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardButtom_slot_1.name,
		type: "slot",
		source: "(26:8) <span slot=\\\"cardButtom\\\">",
		ctx
	});

	return block;
}

// (18:4) <Card>
function create_default_slot_1(ctx) {
	let t0;
	let t1;
	let t2;

	const block = {
		c: function create() {
			t0 = space();
			t1 = space();
			t2 = space();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			t1 = claim_space(nodes);
			t2 = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(t2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(18:4) <Card>",
		ctx
	});

	return block;
}

// (29:8) <span slot="cardImage">
function create_cardImage_slot(ctx) {
	let span;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			span = element("span");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);

			img = claim_element(span_nodes, "IMG", {
				src: true,
				alt: true,
				width: true,
				height: true
			});

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "large.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "caja");
			attr_dev(img, "width", "70");
			attr_dev(img, "height", "70");
			add_location(img, file$1, 28, 32, 1243);
			attr_dev(span, "slot", "cardImage");
			add_location(span, file$1, 28, 8, 1219);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, img);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardImage_slot.name,
		type: "slot",
		source: "(29:8) <span slot=\\\"cardImage\\\">",
		ctx
	});

	return block;
}

// (30:8) <span slot="cardTitle">
function create_cardTitle_slot(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Tienda L");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Tienda L");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardTitle");
			add_location(span, file$1, 29, 8, 1316);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardTitle_slot.name,
		type: "slot",
		source: "(30:8) <span slot=\\\"cardTitle\\\">",
		ctx
	});

	return block;
}

// (31:8) <span slot="cardPharagraph">
function create_cardPharagraph_slot(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Lorem ipsum dolor sit amet consectetur, adipisicing elit. Laborum\n            natus ut animi qui ab? Culpa excepturi doloremque accusamus beatae\n            qui, odio est repudiandae vitae aperiam cumque tenetur hic neque\n            obcaecati.");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Laborum\n            natus ut animi qui ab? Culpa excepturi doloremque accusamus beatae\n            qui, odio est repudiandae vitae aperiam cumque tenetur hic neque\n            obcaecati.");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardPharagraph");
			add_location(span, file$1, 30, 8, 1363);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardPharagraph_slot.name,
		type: "slot",
		source: "(31:8) <span slot=\\\"cardPharagraph\\\">",
		ctx
	});

	return block;
}

// (36:8) <span slot="cardButtom">
function create_cardButtom_slot(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Cotizar");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Cotizar");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardButtom");
			add_location(span, file$1, 35, 8, 1664);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardButtom_slot.name,
		type: "slot",
		source: "(36:8) <span slot=\\\"cardButtom\\\">",
		ctx
	});

	return block;
}

// (28:4) <Card>
function create_default_slot(ctx) {
	let t0;
	let t1;
	let t2;

	const block = {
		c: function create() {
			t0 = space();
			t1 = space();
			t2 = space();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			t1 = claim_space(nodes);
			t2 = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(t2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(28:4) <Card>",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let t0;
	let t1;
	let current;

	const card0 = new Card({
			props: {
				$$slots: {
					default: [create_default_slot_2],
					cardButtom: [create_cardButtom_slot_2],
					cardPharagraph: [create_cardPharagraph_slot_2],
					cardTitle: [create_cardTitle_slot_2],
					cardImage: [create_cardImage_slot_2]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const card1 = new Card({
			props: {
				$$slots: {
					default: [create_default_slot_1],
					cardButtom: [create_cardButtom_slot_1],
					cardPharagraph: [create_cardPharagraph_slot_1],
					cardTitle: [create_cardTitle_slot_1],
					cardImage: [create_cardImage_slot_1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const card2 = new Card({
			props: {
				$$slots: {
					default: [create_default_slot],
					cardButtom: [create_cardButtom_slot],
					cardPharagraph: [create_cardPharagraph_slot],
					cardTitle: [create_cardTitle_slot],
					cardImage: [create_cardImage_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(card0.$$.fragment);
			t0 = space();
			create_component(card1.$$.fragment);
			t1 = space();
			create_component(card2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(card0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(card1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(card2.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "grid md:grid-cols-3 gap-2 rounded-bl place-items-center m-2 shadow-lg mt-20 mb-36");
			add_location(div, file$1, 5, 0, 67);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(card0, div, null);
			append_dev(div, t0);
			mount_component(card1, div, null);
			append_dev(div, t1);
			mount_component(card2, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card0_changes.$$scope = { dirty, ctx };
			}

			card0.$set(card0_changes);
			const card1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card1_changes.$$scope = { dirty, ctx };
			}

			card1.$set(card1_changes);
			const card2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card2_changes.$$scope = { dirty, ctx };
			}

			card2.$set(card2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card0.$$.fragment, local);
			transition_in(card1.$$.fragment, local);
			transition_in(card2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card0.$$.fragment, local);
			transition_out(card1.$$.fragment, local);
			transition_out(card2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(card0);
			destroy_component(card1);
			destroy_component(card2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Cards> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Cards", $$slots, []);
	$$self.$capture_state = () => ({ Card });
	return [];
}

class Cards extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Cards",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/components/tienda/Whatsapp.svelte generated by Svelte v3.22.2 */

const file$2 = "src/components/tienda/Whatsapp.svelte";

function create_fragment$2(ctx) {
	let div2;
	let div0;
	let h3;
	let span0;
	let t0;
	let t1;
	let br;
	let t2;
	let span1;
	let t3;
	let t4;
	let span2;
	let t5;
	let t6;
	let span3;
	let t7;
	let t8;
	let t9;
	let div1;
	let a;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			h3 = element("h3");
			span0 = element("span");
			t0 = text("Hey emprendedor!!!");
			t1 = space();
			br = element("br");
			t2 = text("Con esta mini tienda tendrás seguridad, backups, Whatsapp y Mercado Pago  integrado \n            y muchas otras características, pero si estás buscando\n            ");
			span1 = element("span");
			t3 = text("vender en internet");
			t4 = space();
			span2 = element("span");
			t5 = text("COMO UN PROFESIONAL");
			t6 = text(" encontrá abajo ");
			span3 = element("span");
			t7 = text("El plan");
			t8 = text("\n            que mejor se adapte a tus necesidades o hacé click en el\n            logo y escibirnos...");
			t9 = space();
			div1 = element("div");
			a = element("a");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h3 = claim_element(div0_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			span0 = claim_element(h3_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, "Hey emprendedor!!!");
			span0_nodes.forEach(detach_dev);
			t1 = claim_space(h3_nodes);
			br = claim_element(h3_nodes, "BR", {});
			t2 = claim_text(h3_nodes, "Con esta mini tienda tendrás seguridad, backups, Whatsapp y Mercado Pago  integrado \n            y muchas otras características, pero si estás buscando\n            ");
			span1 = claim_element(h3_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t3 = claim_text(span1_nodes, "vender en internet");
			span1_nodes.forEach(detach_dev);
			t4 = claim_space(h3_nodes);
			span2 = claim_element(h3_nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			t5 = claim_text(span2_nodes, "COMO UN PROFESIONAL");
			span2_nodes.forEach(detach_dev);
			t6 = claim_text(h3_nodes, " encontrá abajo ");
			span3 = claim_element(h3_nodes, "SPAN", { class: true });
			var span3_nodes = children(span3);
			t7 = claim_text(span3_nodes, "El plan");
			span3_nodes.forEach(detach_dev);
			t8 = claim_text(h3_nodes, "\n            que mejor se adapte a tus necesidades o hacé click en el\n            logo y escibirnos...");
			h3_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t9 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			a = claim_element(div1_nodes, "A", { href: true });
			var a_nodes = children(a);
			img = claim_element(a_nodes, "IMG", { class: true, src: true, alt: true });
			a_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "class", "font-bold text-2xl  ");
			add_location(span0, file$2, 13, 12, 319);
			add_location(br, file$2, 14, 12, 392);
			attr_dev(span1, "class", "font-bold");
			add_location(span1, file$2, 16, 12, 562);
			attr_dev(span2, "class", "font-bold ");
			add_location(span2, file$2, 17, 12, 625);
			attr_dev(span3, "class", "font-bold");
			add_location(span3, file$2, 17, 80, 693);
			attr_dev(h3, "class", "text-sm text-gray-700");
			add_location(h3, file$2, 12, 8, 272);
			attr_dev(div0, "class", "p-4 col-span-2");
			add_location(div0, file$2, 11, 4, 235);
			attr_dev(img, "class", "wsp object-fill svelte-vnq8fq");
			if (img.src !== (img_src_value = "wsp2.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "logo whatsapp");
			add_location(img, file$2, 23, 42, 942);
			attr_dev(a, "href", "https://wa.link/2wlo0v");
			add_location(a, file$2, 23, 8, 908);
			attr_dev(div1, "class", "grid col-start-3  mr-2");
			add_location(div1, file$2, 22, 4, 863);
			attr_dev(div2, "class", "grid md:grid-cols-3 bg-green-200 gap-4 rounded-bl place-items-center m-4 rounded-3xl");
			add_location(div2, file$2, 9, 0, 128);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div0, h3);
			append_dev(h3, span0);
			append_dev(span0, t0);
			append_dev(h3, t1);
			append_dev(h3, br);
			append_dev(h3, t2);
			append_dev(h3, span1);
			append_dev(span1, t3);
			append_dev(h3, t4);
			append_dev(h3, span2);
			append_dev(span2, t5);
			append_dev(h3, t6);
			append_dev(h3, span3);
			append_dev(span3, t7);
			append_dev(h3, t8);
			append_dev(div2, t9);
			append_dev(div2, div1);
			append_dev(div1, a);
			append_dev(a, img);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Whatsapp> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Whatsapp", $$slots, []);
	return [];
}

class Whatsapp extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Whatsapp",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/components/tienda/Hero.svelte generated by Svelte v3.22.2 */

const file$3 = "src/components/tienda/Hero.svelte";
const get_heroPharagraph_slot_changes = dirty => ({});
const get_heroPharagraph_slot_context = ctx => ({});
const get_heroButtom_slot_changes = dirty => ({});
const get_heroButtom_slot_context = ctx => ({});
const get_heroTitle_slot_changes = dirty => ({});
const get_heroTitle_slot_context = ctx => ({});

// (5:34)  Creá tu tienda             
function fallback_block_2(ctx) {
	let t0;
	let br0;
	let span0;
	let t1;
	let t2;
	let br1;
	let span1;
	let t3;
	let t4;
	let br2;
	let span2;
	let t5;

	const block = {
		c: function create() {
			t0 = text("Creá tu tienda\n            ");
			br0 = element("br");
			span0 = element("span");
			t1 = text("on line");
			t2 = text("\n            HOY! por\n            ");
			br1 = element("br");
			span1 = element("span");
			t3 = text("solo");
			t4 = space();
			br2 = element("br");
			span2 = element("span");
			t5 = text("$ 5000");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "Creá tu tienda\n            ");
			br0 = claim_element(nodes, "BR", {});
			span0 = claim_element(nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t1 = claim_text(span0_nodes, "on line");
			span0_nodes.forEach(detach_dev);
			t2 = claim_text(nodes, "\n            HOY! por\n            ");
			br1 = claim_element(nodes, "BR", {});
			span1 = claim_element(nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t3 = claim_text(span1_nodes, "solo");
			span1_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			br2 = claim_element(nodes, "BR", {});
			span2 = claim_element(nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			t5 = claim_text(span2_nodes, "$ 5000");
			span2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(br0, file$3, 5, 12, 284);
			attr_dev(span0, "class", "text-blue-500");
			add_location(span0, file$3, 5, 18, 290);
			add_location(br1, file$3, 7, 12, 366);
			attr_dev(span1, "class", "underline");
			add_location(span1, file$3, 7, 18, 372);
			add_location(br2, file$3, 8, 12, 422);
			attr_dev(span2, "class", "text-green-500");
			add_location(span2, file$3, 8, 18, 428);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, span0, anchor);
			append_dev(span0, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, span1, anchor);
			append_dev(span1, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, br2, anchor);
			insert_dev(target, span2, anchor);
			append_dev(span2, t5);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(span0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(span1);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(br2);
			if (detaching) detach_dev(span2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block_2.name,
		type: "fallback",
		source: "(5:34)  Creá tu tienda             ",
		ctx
	});

	return block;
}

// (15:40)  Comprar
function fallback_block_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Comprar");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Comprar");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block_1.name,
		type: "fallback",
		source: "(15:40)  Comprar",
		ctx
	});

	return block;
}

// (21:44) *Oferta válida por 48 hs, el costo de alojamiento mensual mínimo es                     de $500.
function fallback_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("*Oferta válida por 48 hs, el costo de alojamiento mensual mínimo es\n                    de $500.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "*Oferta válida por 48 hs, el costo de alojamiento mensual mínimo es\n                    de $500.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(21:44) *Oferta válida por 48 hs, el costo de alojamiento mensual mínimo es                     de $500.",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let div3;
	let div0;
	let h1;
	let t0;
	let div1;
	let button;
	let t1;
	let div2;
	let p;
	let current;
	const heroTitle_slot_template = /*$$slots*/ ctx[1].heroTitle;
	const heroTitle_slot = create_slot(heroTitle_slot_template, ctx, /*$$scope*/ ctx[0], get_heroTitle_slot_context);
	const heroTitle_slot_or_fallback = heroTitle_slot || fallback_block_2(ctx);
	const heroButtom_slot_template = /*$$slots*/ ctx[1].heroButtom;
	const heroButtom_slot = create_slot(heroButtom_slot_template, ctx, /*$$scope*/ ctx[0], get_heroButtom_slot_context);
	const heroButtom_slot_or_fallback = heroButtom_slot || fallback_block_1(ctx);
	const heroPharagraph_slot_template = /*$$slots*/ ctx[1].heroPharagraph;
	const heroPharagraph_slot = create_slot(heroPharagraph_slot_template, ctx, /*$$scope*/ ctx[0], get_heroPharagraph_slot_context);
	const heroPharagraph_slot_or_fallback = heroPharagraph_slot || fallback_block(ctx);

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			h1 = element("h1");
			if (heroTitle_slot_or_fallback) heroTitle_slot_or_fallback.c();
			t0 = space();
			div1 = element("div");
			button = element("button");
			if (heroButtom_slot_or_fallback) heroButtom_slot_or_fallback.c();
			t1 = space();
			div2 = element("div");
			p = element("p");
			if (heroPharagraph_slot_or_fallback) heroPharagraph_slot_or_fallback.c();
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			if (heroTitle_slot_or_fallback) heroTitle_slot_or_fallback.l(h1_nodes);
			h1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			button = claim_element(div1_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			if (heroButtom_slot_or_fallback) heroButtom_slot_or_fallback.l(button_nodes);
			button_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", {});
			var div2_nodes = children(div2);
			p = claim_element(div2_nodes, "P", { class: true });
			var p_nodes = children(p);
			if (heroPharagraph_slot_or_fallback) heroPharagraph_slot_or_fallback.l(p_nodes);
			p_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "font-sans-Roboto font-bold text-center text-purple-500 text-4xl md:text-6xl mt-4 p-4 ");
			add_location(h1, file$3, 3, 8, 123);
			attr_dev(div0, "class", " mb-8");
			add_location(div0, file$3, 2, 4, 95);
			attr_dev(button, "class", "  w-64  mt-4 mb-4  ring ring-purple-600 ring-offset-4 ring-offset-purple-100 hover:text-gray-50 transition duration-500 ease-in-out bg-gradient-to-r from-pink-500 to-yellow-500 transform hover:-translate-y-1 hover:scale-110 font-bold py-2 px-4 rounded-xl m-2");
			add_location(button, file$3, 13, 12, 581);
			attr_dev(div1, "class", "grid justify-center mt-8 mb-8");
			add_location(div1, file$3, 12, 8, 525);
			attr_dev(p, "class", " text-blue-500 font-bold text-center mt-4");
			add_location(p, file$3, 19, 12, 992);
			add_location(div2, file$3, 18, 8, 974);
			attr_dev(div3, "class", " gap-4 ml-8 mr-8 mb-10 mt-1 grid-cols-1 rounded-bl shadow-lg bg-gray-100");
			add_location(div3, file$3, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div0, h1);

			if (heroTitle_slot_or_fallback) {
				heroTitle_slot_or_fallback.m(h1, null);
			}

			append_dev(div3, t0);
			append_dev(div3, div1);
			append_dev(div1, button);

			if (heroButtom_slot_or_fallback) {
				heroButtom_slot_or_fallback.m(button, null);
			}

			append_dev(div3, t1);
			append_dev(div3, div2);
			append_dev(div2, p);

			if (heroPharagraph_slot_or_fallback) {
				heroPharagraph_slot_or_fallback.m(p, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (heroTitle_slot) {
				if (heroTitle_slot.p && dirty & /*$$scope*/ 1) {
					heroTitle_slot.p(get_slot_context(heroTitle_slot_template, ctx, /*$$scope*/ ctx[0], get_heroTitle_slot_context), get_slot_changes(heroTitle_slot_template, /*$$scope*/ ctx[0], dirty, get_heroTitle_slot_changes));
				}
			}

			if (heroButtom_slot) {
				if (heroButtom_slot.p && dirty & /*$$scope*/ 1) {
					heroButtom_slot.p(get_slot_context(heroButtom_slot_template, ctx, /*$$scope*/ ctx[0], get_heroButtom_slot_context), get_slot_changes(heroButtom_slot_template, /*$$scope*/ ctx[0], dirty, get_heroButtom_slot_changes));
				}
			}

			if (heroPharagraph_slot) {
				if (heroPharagraph_slot.p && dirty & /*$$scope*/ 1) {
					heroPharagraph_slot.p(get_slot_context(heroPharagraph_slot_template, ctx, /*$$scope*/ ctx[0], get_heroPharagraph_slot_context), get_slot_changes(heroPharagraph_slot_template, /*$$scope*/ ctx[0], dirty, get_heroPharagraph_slot_changes));
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(heroTitle_slot_or_fallback, local);
			transition_in(heroButtom_slot_or_fallback, local);
			transition_in(heroPharagraph_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(heroTitle_slot_or_fallback, local);
			transition_out(heroButtom_slot_or_fallback, local);
			transition_out(heroPharagraph_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			if (heroTitle_slot_or_fallback) heroTitle_slot_or_fallback.d(detaching);
			if (heroButtom_slot_or_fallback) heroButtom_slot_or_fallback.d(detaching);
			if (heroPharagraph_slot_or_fallback) heroPharagraph_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Hero> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Hero", $$slots, ['heroTitle','heroButtom','heroPharagraph']);

	$$self.$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, $$slots];
}

class Hero extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Hero",
			options,
			id: create_fragment$3.name
		});
	}
}

/* src/components/tienda/Feature.svelte generated by Svelte v3.22.2 */

const file$4 = "src/components/tienda/Feature.svelte";
const get_featureContent_slot_changes = dirty => ({});
const get_featureContent_slot_context = ctx => ({});
const get_featureIcon_slot_changes = dirty => ({});
const get_featureIcon_slot_context = ctx => ({});

// (4:33) aquí va un ícono
function fallback_block_1$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("aquí va un ícono");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "aquí va un ícono");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block_1$1.name,
		type: "fallback",
		source: "(4:33) aquí va un ícono",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let div2;
	let div0;
	let t;
	let div1;
	let current;
	const featureIcon_slot_template = /*$$slots*/ ctx[1].featureIcon;
	const featureIcon_slot = create_slot(featureIcon_slot_template, ctx, /*$$scope*/ ctx[0], get_featureIcon_slot_context);
	const featureIcon_slot_or_fallback = featureIcon_slot || fallback_block_1$1(ctx);
	const featureContent_slot_template = /*$$slots*/ ctx[1].featureContent;
	const featureContent_slot = create_slot(featureContent_slot_template, ctx, /*$$scope*/ ctx[0], get_featureContent_slot_context);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			if (featureIcon_slot_or_fallback) featureIcon_slot_or_fallback.c();
			t = space();
			div1 = element("div");
			if (featureContent_slot) featureContent_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (featureIcon_slot_or_fallback) featureIcon_slot_or_fallback.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (featureContent_slot) featureContent_slot.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "place-self-end");
			add_location(div0, file$4, 2, 4, 74);
			attr_dev(div1, "class", "text-indigo-600 font-bold col-span-3 self-center ");
			add_location(div1, file$4, 6, 4, 176);
			attr_dev(div2, "class", "grid grid-cols-4 justify-items-start gap-2 rounded-bl ");
			add_location(div2, file$4, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);

			if (featureIcon_slot_or_fallback) {
				featureIcon_slot_or_fallback.m(div0, null);
			}

			append_dev(div2, t);
			append_dev(div2, div1);

			if (featureContent_slot) {
				featureContent_slot.m(div1, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (featureIcon_slot) {
				if (featureIcon_slot.p && dirty & /*$$scope*/ 1) {
					featureIcon_slot.p(get_slot_context(featureIcon_slot_template, ctx, /*$$scope*/ ctx[0], get_featureIcon_slot_context), get_slot_changes(featureIcon_slot_template, /*$$scope*/ ctx[0], dirty, get_featureIcon_slot_changes));
				}
			}

			if (featureContent_slot) {
				if (featureContent_slot.p && dirty & /*$$scope*/ 1) {
					featureContent_slot.p(get_slot_context(featureContent_slot_template, ctx, /*$$scope*/ ctx[0], get_featureContent_slot_context), get_slot_changes(featureContent_slot_template, /*$$scope*/ ctx[0], dirty, get_featureContent_slot_changes));
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(featureIcon_slot_or_fallback, local);
			transition_in(featureContent_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(featureIcon_slot_or_fallback, local);
			transition_out(featureContent_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if (featureIcon_slot_or_fallback) featureIcon_slot_or_fallback.d(detaching);
			if (featureContent_slot) featureContent_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Feature> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Feature", $$slots, ['featureIcon','featureContent']);

	$$self.$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, $$slots];
}

class Feature extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Feature",
			options,
			id: create_fragment$4.name
		});
	}
}

/* src/components/tienda/Features.svelte generated by Svelte v3.22.2 */
const file$5 = "src/components/tienda/Features.svelte";

// (15:12) <span slot="featureIcon">
function create_featureIcon_slot_5(ctx) {
	let span;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			span = element("span");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);

			img = claim_element(span_nodes, "IMG", {
				src: true,
				alt: true,
				width: true,
				height: true
			});

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "loyalty-24px.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "caja");
			attr_dev(img, "width", "40");
			attr_dev(img, "height", "40");
			add_location(img, file$5, 14, 38, 452);
			attr_dev(span, "slot", "featureIcon");
			add_location(span, file$5, 14, 12, 426);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, img);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_featureIcon_slot_5.name,
		type: "slot",
		source: "(15:12) <span slot=\\\"featureIcon\\\">",
		ctx
	});

	return block;
}

// (16:12) <span slot="featureContent">
function create_featureContent_slot_5(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Hasta 10 productos o servicios");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Hasta 10 productos o servicios");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "featureContent");
			add_location(span, file$5, 15, 12, 537);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_featureContent_slot_5.name,
		type: "slot",
		source: "(16:12) <span slot=\\\"featureContent\\\">",
		ctx
	});

	return block;
}

// (14:8) <Feature>
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = space();
		},
		l: function claim(nodes) {
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(14:8) <Feature>",
		ctx
	});

	return block;
}

// (21:12) <span slot="featureIcon">
function create_featureIcon_slot_4(ctx) {
	let span;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			span = element("span");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);

			img = claim_element(span_nodes, "IMG", {
				src: true,
				alt: true,
				width: true,
				height: true
			});

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "storefront-24px.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "caja");
			attr_dev(img, "width", "40");
			attr_dev(img, "height", "40");
			add_location(img, file$5, 20, 38, 699);
			attr_dev(span, "slot", "featureIcon");
			add_location(span, file$5, 20, 12, 673);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, img);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_featureIcon_slot_4.name,
		type: "slot",
		source: "(21:12) <span slot=\\\"featureIcon\\\">",
		ctx
	});

	return block;
}

// (22:12) <span slot="featureContent">
function create_featureContent_slot_4(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Intergración con Mercado Pago");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Intergración con Mercado Pago");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "featureContent");
			add_location(span, file$5, 21, 12, 786);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_featureContent_slot_4.name,
		type: "slot",
		source: "(22:12) <span slot=\\\"featureContent\\\">",
		ctx
	});

	return block;
}

// (20:8) <Feature>
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = space();
		},
		l: function claim(nodes) {
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(20:8) <Feature>",
		ctx
	});

	return block;
}

// (27:12) <span slot="featureIcon">
function create_featureIcon_slot_3(ctx) {
	let span;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			span = element("span");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);

			img = claim_element(span_nodes, "IMG", {
				src: true,
				alt: true,
				width: true,
				height: true
			});

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "facebook-24px.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "caja");
			attr_dev(img, "width", "40");
			attr_dev(img, "height", "40");
			add_location(img, file$5, 26, 38, 948);
			attr_dev(span, "slot", "featureIcon");
			add_location(span, file$5, 26, 12, 922);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, img);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_featureIcon_slot_3.name,
		type: "slot",
		source: "(27:12) <span slot=\\\"featureIcon\\\">",
		ctx
	});

	return block;
}

// (28:12) <span slot="featureContent">
function create_featureContent_slot_3(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Redes Sociales");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Redes Sociales");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "featureContent");
			add_location(span, file$5, 27, 12, 1033);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_featureContent_slot_3.name,
		type: "slot",
		source: "(28:12) <span slot=\\\"featureContent\\\">",
		ctx
	});

	return block;
}

// (26:8) <Feature>
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = space();
		},
		l: function claim(nodes) {
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(26:8) <Feature>",
		ctx
	});

	return block;
}

// (33:12) <span slot="featureIcon">
function create_featureIcon_slot_2(ctx) {
	let span;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			span = element("span");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);

			img = claim_element(span_nodes, "IMG", {
				src: true,
				alt: true,
				width: true,
				height: true
			});

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "question_answer-24px.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "caja");
			attr_dev(img, "width", "40");
			attr_dev(img, "height", "40");
			add_location(img, file$5, 32, 38, 1179);
			attr_dev(span, "slot", "featureIcon");
			add_location(span, file$5, 32, 12, 1153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, img);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_featureIcon_slot_2.name,
		type: "slot",
		source: "(33:12) <span slot=\\\"featureIcon\\\">",
		ctx
	});

	return block;
}

// (34:12) <span slot="featureContent">
function create_featureContent_slot_2(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Whatsapp Integrado");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Whatsapp Integrado");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "featureContent");
			add_location(span, file$5, 33, 12, 1271);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_featureContent_slot_2.name,
		type: "slot",
		source: "(34:12) <span slot=\\\"featureContent\\\">",
		ctx
	});

	return block;
}

// (32:8) <Feature>
function create_default_slot_2$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = space();
		},
		l: function claim(nodes) {
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$1.name,
		type: "slot",
		source: "(32:8) <Feature>",
		ctx
	});

	return block;
}

// (39:12) <span slot="featureIcon">
function create_featureIcon_slot_1(ctx) {
	let span;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			span = element("span");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);

			img = claim_element(span_nodes, "IMG", {
				src: true,
				alt: true,
				width: true,
				height: true
			});

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "backup-24px.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "caja");
			attr_dev(img, "width", "40");
			attr_dev(img, "height", "40");
			add_location(img, file$5, 38, 38, 1421);
			attr_dev(span, "slot", "featureIcon");
			add_location(span, file$5, 38, 12, 1395);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, img);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_featureIcon_slot_1.name,
		type: "slot",
		source: "(39:12) <span slot=\\\"featureIcon\\\">",
		ctx
	});

	return block;
}

// (40:12) <span slot="featureContent">
function create_featureContent_slot_1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Respaldo basico de tus datos");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Respaldo basico de tus datos");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "featureContent");
			add_location(span, file$5, 39, 12, 1504);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_featureContent_slot_1.name,
		type: "slot",
		source: "(40:12) <span slot=\\\"featureContent\\\">",
		ctx
	});

	return block;
}

// (38:8) <Feature>
function create_default_slot_1$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = space();
		},
		l: function claim(nodes) {
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(38:8) <Feature>",
		ctx
	});

	return block;
}

// (45:12) <span slot="featureIcon">
function create_featureIcon_slot(ctx) {
	let span;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			span = element("span");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);

			img = claim_element(span_nodes, "IMG", {
				src: true,
				alt: true,
				width: true,
				height: true
			});

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "security-24px.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "caja");
			attr_dev(img, "width", "40");
			attr_dev(img, "height", "40");
			add_location(img, file$5, 44, 38, 1664);
			attr_dev(span, "slot", "featureIcon");
			add_location(span, file$5, 44, 12, 1638);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, img);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_featureIcon_slot.name,
		type: "slot",
		source: "(45:12) <span slot=\\\"featureIcon\\\">",
		ctx
	});

	return block;
}

// (46:12) <span slot="featureContent">
function create_featureContent_slot(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Seguridad mediante certificados SSL");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Seguridad mediante certificados SSL");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "featureContent");
			add_location(span, file$5, 45, 12, 1749);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_featureContent_slot.name,
		type: "slot",
		source: "(46:12) <span slot=\\\"featureContent\\\">",
		ctx
	});

	return block;
}

// (44:8) <Feature>
function create_default_slot$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = space();
		},
		l: function claim(nodes) {
			t = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(44:8) <Feature>",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let div7;
	let div0;
	let h2;
	let span;
	let t0;
	let t1;
	let br;
	let t2;
	let t3;
	let div1;
	let t4;
	let div2;
	let t5;
	let div3;
	let t6;
	let div4;
	let t7;
	let div5;
	let t8;
	let div6;
	let current;

	const feature0 = new Feature({
			props: {
				$$slots: {
					default: [create_default_slot_5],
					featureContent: [create_featureContent_slot_5],
					featureIcon: [create_featureIcon_slot_5]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const feature1 = new Feature({
			props: {
				$$slots: {
					default: [create_default_slot_4],
					featureContent: [create_featureContent_slot_4],
					featureIcon: [create_featureIcon_slot_4]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const feature2 = new Feature({
			props: {
				$$slots: {
					default: [create_default_slot_3],
					featureContent: [create_featureContent_slot_3],
					featureIcon: [create_featureIcon_slot_3]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const feature3 = new Feature({
			props: {
				$$slots: {
					default: [create_default_slot_2$1],
					featureContent: [create_featureContent_slot_2],
					featureIcon: [create_featureIcon_slot_2]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const feature4 = new Feature({
			props: {
				$$slots: {
					default: [create_default_slot_1$1],
					featureContent: [create_featureContent_slot_1],
					featureIcon: [create_featureIcon_slot_1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const feature5 = new Feature({
			props: {
				$$slots: {
					default: [create_default_slot$1],
					featureContent: [create_featureContent_slot],
					featureIcon: [create_featureIcon_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div7 = element("div");
			div0 = element("div");
			h2 = element("h2");
			span = element("span");
			t0 = text("NO LA PIENSES MAS");
			t1 = space();
			br = element("br");
			t2 = text("\n            Por menos de lo que cuesta una zapatilla obtenés...");
			t3 = space();
			div1 = element("div");
			create_component(feature0.$$.fragment);
			t4 = space();
			div2 = element("div");
			create_component(feature1.$$.fragment);
			t5 = space();
			div3 = element("div");
			create_component(feature2.$$.fragment);
			t6 = space();
			div4 = element("div");
			create_component(feature3.$$.fragment);
			t7 = space();
			div5 = element("div");
			create_component(feature4.$$.fragment);
			t8 = space();
			div6 = element("div");
			create_component(feature5.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div7 = claim_element(nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div0 = claim_element(div7_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h2 = claim_element(div0_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			span = claim_element(h2_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "NO LA PIENSES MAS");
			span_nodes.forEach(detach_dev);
			t1 = claim_space(h2_nodes);
			br = claim_element(h2_nodes, "BR", {});
			t2 = claim_text(h2_nodes, "\n            Por menos de lo que cuesta una zapatilla obtenés...");
			h2_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t3 = claim_space(div7_nodes);
			div1 = claim_element(div7_nodes, "DIV", {});
			var div1_nodes = children(div1);
			claim_component(feature0.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t4 = claim_space(div7_nodes);
			div2 = claim_element(div7_nodes, "DIV", {});
			var div2_nodes = children(div2);
			claim_component(feature1.$$.fragment, div2_nodes);
			div2_nodes.forEach(detach_dev);
			t5 = claim_space(div7_nodes);
			div3 = claim_element(div7_nodes, "DIV", {});
			var div3_nodes = children(div3);
			claim_component(feature2.$$.fragment, div3_nodes);
			div3_nodes.forEach(detach_dev);
			t6 = claim_space(div7_nodes);
			div4 = claim_element(div7_nodes, "DIV", {});
			var div4_nodes = children(div4);
			claim_component(feature3.$$.fragment, div4_nodes);
			div4_nodes.forEach(detach_dev);
			t7 = claim_space(div7_nodes);
			div5 = claim_element(div7_nodes, "DIV", {});
			var div5_nodes = children(div5);
			claim_component(feature4.$$.fragment, div5_nodes);
			div5_nodes.forEach(detach_dev);
			t8 = claim_space(div7_nodes);
			div6 = claim_element(div7_nodes, "DIV", {});
			var div6_nodes = children(div6);
			claim_component(feature5.$$.fragment, div6_nodes);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "text-green-500");
			add_location(span, file$5, 7, 12, 224);
			add_location(br, file$5, 8, 12, 290);
			attr_dev(h2, "class", "text-blue-600 font-bold font-size-lg text-2xl mb-4");
			add_location(h2, file$5, 6, 8, 148);
			attr_dev(div0, "class", "grid place-items-center m-8 p-4 ");
			add_location(div0, file$5, 5, 4, 93);
			add_location(div1, file$5, 12, 4, 390);
			add_location(div2, file$5, 18, 4, 637);
			add_location(div3, file$5, 24, 4, 886);
			add_location(div4, file$5, 30, 4, 1117);
			add_location(div5, file$5, 36, 4, 1359);
			add_location(div6, file$5, 42, 4, 1602);
			attr_dev(div7, "class", "shadow-lg ");
			add_location(div7, file$5, 4, 0, 64);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div7, anchor);
			append_dev(div7, div0);
			append_dev(div0, h2);
			append_dev(h2, span);
			append_dev(span, t0);
			append_dev(h2, t1);
			append_dev(h2, br);
			append_dev(h2, t2);
			append_dev(div7, t3);
			append_dev(div7, div1);
			mount_component(feature0, div1, null);
			append_dev(div7, t4);
			append_dev(div7, div2);
			mount_component(feature1, div2, null);
			append_dev(div7, t5);
			append_dev(div7, div3);
			mount_component(feature2, div3, null);
			append_dev(div7, t6);
			append_dev(div7, div4);
			mount_component(feature3, div4, null);
			append_dev(div7, t7);
			append_dev(div7, div5);
			mount_component(feature4, div5, null);
			append_dev(div7, t8);
			append_dev(div7, div6);
			mount_component(feature5, div6, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const feature0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				feature0_changes.$$scope = { dirty, ctx };
			}

			feature0.$set(feature0_changes);
			const feature1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				feature1_changes.$$scope = { dirty, ctx };
			}

			feature1.$set(feature1_changes);
			const feature2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				feature2_changes.$$scope = { dirty, ctx };
			}

			feature2.$set(feature2_changes);
			const feature3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				feature3_changes.$$scope = { dirty, ctx };
			}

			feature3.$set(feature3_changes);
			const feature4_changes = {};

			if (dirty & /*$$scope*/ 1) {
				feature4_changes.$$scope = { dirty, ctx };
			}

			feature4.$set(feature4_changes);
			const feature5_changes = {};

			if (dirty & /*$$scope*/ 1) {
				feature5_changes.$$scope = { dirty, ctx };
			}

			feature5.$set(feature5_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(feature0.$$.fragment, local);
			transition_in(feature1.$$.fragment, local);
			transition_in(feature2.$$.fragment, local);
			transition_in(feature3.$$.fragment, local);
			transition_in(feature4.$$.fragment, local);
			transition_in(feature5.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(feature0.$$.fragment, local);
			transition_out(feature1.$$.fragment, local);
			transition_out(feature2.$$.fragment, local);
			transition_out(feature3.$$.fragment, local);
			transition_out(feature4.$$.fragment, local);
			transition_out(feature5.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div7);
			destroy_component(feature0);
			destroy_component(feature1);
			destroy_component(feature2);
			destroy_component(feature3);
			destroy_component(feature4);
			destroy_component(feature5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Features> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Features", $$slots, []);
	$$self.$capture_state = () => ({ Feature });
	return [];
}

class Features extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Features",
			options,
			id: create_fragment$5.name
		});
	}
}

/* src/routes/carta.svelte generated by Svelte v3.22.2 */

function create_fragment$6(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const hero = new Hero({ $$inline: true });
	const features = new Features({ $$inline: true });
	const whatsapp = new Whatsapp({ $$inline: true });
	const cards = new Cards({ $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			create_component(hero.$$.fragment);
			t1 = space();
			create_component(features.$$.fragment);
			t2 = space();
			create_component(whatsapp.$$.fragment);
			t3 = space();
			create_component(cards.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-v57o8a\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			claim_component(hero.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(features.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(whatsapp.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(cards.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Oferta página web";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			mount_component(hero, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(features, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(whatsapp, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(cards, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(hero.$$.fragment, local);
			transition_in(features.$$.fragment, local);
			transition_in(whatsapp.$$.fragment, local);
			transition_in(cards.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(hero.$$.fragment, local);
			transition_out(features.$$.fragment, local);
			transition_out(whatsapp.$$.fragment, local);
			transition_out(cards.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			destroy_component(hero, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(features, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(whatsapp, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(cards, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Carta> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Carta", $$slots, []);
	$$self.$capture_state = () => ({ Cards, Whatsapp, Hero, Features });
	return [];
}

class Carta extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Carta",
			options,
			id: create_fragment$6.name
		});
	}
}

export default Carta;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydGEuNWU1ZDRmOWIuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
