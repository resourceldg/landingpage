import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as create_slot, v as validate_slots, e as element, a as space, b as claim_element, f as children, g as detach_dev, h as claim_space, j as add_location, k as attr_dev, l as insert_dev, m as append_dev, n as get_slot_context, o as get_slot_changes, t as transition_in, p as transition_out, q as create_component, r as claim_component, u as mount_component, w as destroy_component, x as text, y as claim_text, z as noop, A as query_selector_all } from './client.84417fbe.js';

/* src/components/Card.svelte generated by Svelte v3.22.2 */

const file = "src/components/Card.svelte";
const get_cardButtom_slot_changes = dirty => ({});
const get_cardButtom_slot_context = ctx => ({});
const get_cardPharagraph_slot_changes = dirty => ({});
const get_cardPharagraph_slot_context = ctx => ({});
const get_cardTitle_slot_changes = dirty => ({});
const get_cardTitle_slot_context = ctx => ({});
const get_cardImage_slot_changes = dirty => ({});
const get_cardImage_slot_context = ctx => ({});

function create_fragment(ctx) {
	let div3;
	let div2;
	let div0;
	let t0;
	let div1;
	let h3;
	let t1;
	let p;
	let t2;
	let button;
	let current;
	const cardImage_slot_template = /*$$slots*/ ctx[1].cardImage;
	const cardImage_slot = create_slot(cardImage_slot_template, ctx, /*$$scope*/ ctx[0], get_cardImage_slot_context);
	const cardTitle_slot_template = /*$$slots*/ ctx[1].cardTitle;
	const cardTitle_slot = create_slot(cardTitle_slot_template, ctx, /*$$scope*/ ctx[0], get_cardTitle_slot_context);
	const cardPharagraph_slot_template = /*$$slots*/ ctx[1].cardPharagraph;
	const cardPharagraph_slot = create_slot(cardPharagraph_slot_template, ctx, /*$$scope*/ ctx[0], get_cardPharagraph_slot_context);
	const cardButtom_slot_template = /*$$slots*/ ctx[1].cardButtom;
	const cardButtom_slot = create_slot(cardButtom_slot_template, ctx, /*$$scope*/ ctx[0], get_cardButtom_slot_context);

	const block = {
		c: function create() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			if (cardImage_slot) cardImage_slot.c();
			t0 = space();
			div1 = element("div");
			h3 = element("h3");
			if (cardTitle_slot) cardTitle_slot.c();
			t1 = space();
			p = element("p");
			if (cardPharagraph_slot) cardPharagraph_slot.c();
			t2 = space();
			button = element("button");
			if (cardButtom_slot) cardButtom_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", {});
			var div0_nodes = children(div0);
			if (cardImage_slot) cardImage_slot.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", {});
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", { class: true, S: true });
			var h3_nodes = children(h3);
			if (cardTitle_slot) cardTitle_slot.l(h3_nodes);
			h3_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", {});
			var p_nodes = children(p);
			if (cardPharagraph_slot) cardPharagraph_slot.l(p_nodes);
			p_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			button = claim_element(div1_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			if (cardButtom_slot) cardButtom_slot.l(button_nodes);
			button_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div0, file, 3, 8, 140);
			attr_dev(h3, "class", "font-bold ");
			attr_dev(h3, "s", "");
			add_location(h3, file, 9, 12, 286);
			add_location(p, file, 14, 12, 453);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "p-4 text-gray-50 font-bold bg-gradient-to-r from-green-400 to-blue-500 hover:from-pink-500 hover:to-yellow-500");
			add_location(button, file, 19, 12, 602);
			add_location(div1, file, 8, 8, 268);
			attr_dev(div2, "class", "grid  grid-rows-2 gap-4 m-4 p-4 rounded-bl shadow-lg place-items-center ");
			add_location(div2, file, 1, 4, 37);
			attr_dev(div3, "class", "place-items-center");
			add_location(div3, file, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div2);
			append_dev(div2, div0);

			if (cardImage_slot) {
				cardImage_slot.m(div0, null);
			}

			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, h3);

			if (cardTitle_slot) {
				cardTitle_slot.m(h3, null);
			}

			append_dev(div1, t1);
			append_dev(div1, p);

			if (cardPharagraph_slot) {
				cardPharagraph_slot.m(p, null);
			}

			append_dev(div1, t2);
			append_dev(div1, button);

			if (cardButtom_slot) {
				cardButtom_slot.m(button, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (cardImage_slot) {
				if (cardImage_slot.p && dirty & /*$$scope*/ 1) {
					cardImage_slot.p(get_slot_context(cardImage_slot_template, ctx, /*$$scope*/ ctx[0], get_cardImage_slot_context), get_slot_changes(cardImage_slot_template, /*$$scope*/ ctx[0], dirty, get_cardImage_slot_changes));
				}
			}

			if (cardTitle_slot) {
				if (cardTitle_slot.p && dirty & /*$$scope*/ 1) {
					cardTitle_slot.p(get_slot_context(cardTitle_slot_template, ctx, /*$$scope*/ ctx[0], get_cardTitle_slot_context), get_slot_changes(cardTitle_slot_template, /*$$scope*/ ctx[0], dirty, get_cardTitle_slot_changes));
				}
			}

			if (cardPharagraph_slot) {
				if (cardPharagraph_slot.p && dirty & /*$$scope*/ 1) {
					cardPharagraph_slot.p(get_slot_context(cardPharagraph_slot_template, ctx, /*$$scope*/ ctx[0], get_cardPharagraph_slot_context), get_slot_changes(cardPharagraph_slot_template, /*$$scope*/ ctx[0], dirty, get_cardPharagraph_slot_changes));
				}
			}

			if (cardButtom_slot) {
				if (cardButtom_slot.p && dirty & /*$$scope*/ 1) {
					cardButtom_slot.p(get_slot_context(cardButtom_slot_template, ctx, /*$$scope*/ ctx[0], get_cardButtom_slot_context), get_slot_changes(cardButtom_slot_template, /*$$scope*/ ctx[0], dirty, get_cardButtom_slot_changes));
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cardImage_slot, local);
			transition_in(cardTitle_slot, local);
			transition_in(cardPharagraph_slot, local);
			transition_in(cardButtom_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cardImage_slot, local);
			transition_out(cardTitle_slot, local);
			transition_out(cardPharagraph_slot, local);
			transition_out(cardButtom_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			if (cardImage_slot) cardImage_slot.d(detaching);
			if (cardTitle_slot) cardTitle_slot.d(detaching);
			if (cardPharagraph_slot) cardPharagraph_slot.d(detaching);
			if (cardButtom_slot) cardButtom_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Card> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Card", $$slots, ['cardImage','cardTitle','cardPharagraph','cardButtom']);

	$$self.$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, $$slots];
}

class Card extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Card",
			options,
			id: create_fragment.name
		});
	}
}

/* src/components/Cards.svelte generated by Svelte v3.22.2 */
const file$1 = "src/components/Cards.svelte";

// (9:8) <span slot="cardImage">
function create_cardImage_slot_2(ctx) {
	let span;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			span = element("span");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);

			img = claim_element(span_nodes, "IMG", {
				src: true,
				alt: true,
				width: true,
				height: true
			});

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "small.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "caja");
			attr_dev(img, "width", "70");
			attr_dev(img, "height", "70");
			add_location(img, file$1, 8, 32, 224);
			attr_dev(span, "slot", "cardImage");
			add_location(span, file$1, 8, 8, 200);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, img);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardImage_slot_2.name,
		type: "slot",
		source: "(9:8) <span slot=\\\"cardImage\\\">",
		ctx
	});

	return block;
}

// (10:8) <span slot="cardTitle">
function create_cardTitle_slot_2(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Tienda S");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Tienda S");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardTitle");
			add_location(span, file$1, 9, 8, 297);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardTitle_slot_2.name,
		type: "slot",
		source: "(10:8) <span slot=\\\"cardTitle\\\">",
		ctx
	});

	return block;
}

// (11:8) <span slot="cardPharagraph">
function create_cardPharagraph_slot_2(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Lorem ipsum dolor sit amet consectetur, adipisicing elit. Laborum\n            natus ut animi qui ab? Culpa excepturi doloremque accusamus beatae\n            qui, odio est repudiandae vitae aperiam cumque tenetur hic neque\n            obcaecati.");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Laborum\n            natus ut animi qui ab? Culpa excepturi doloremque accusamus beatae\n            qui, odio est repudiandae vitae aperiam cumque tenetur hic neque\n            obcaecati.");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardPharagraph");
			add_location(span, file$1, 10, 8, 344);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardPharagraph_slot_2.name,
		type: "slot",
		source: "(11:8) <span slot=\\\"cardPharagraph\\\">",
		ctx
	});

	return block;
}

// (16:8) <span slot="cardButtom">
function create_cardButtom_slot_2(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Comprar");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Comprar");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardButtom");
			add_location(span, file$1, 15, 8, 645);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardButtom_slot_2.name,
		type: "slot",
		source: "(16:8) <span slot=\\\"cardButtom\\\">",
		ctx
	});

	return block;
}

// (8:4) <Card  >
function create_default_slot_2(ctx) {
	let t0;
	let t1;
	let t2;

	const block = {
		c: function create() {
			t0 = space();
			t1 = space();
			t2 = space();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			t1 = claim_space(nodes);
			t2 = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(t2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(8:4) <Card  >",
		ctx
	});

	return block;
}

// (19:8) <span slot="cardImage">
function create_cardImage_slot_1(ctx) {
	let span;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			span = element("span");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);

			img = claim_element(span_nodes, "IMG", {
				src: true,
				alt: true,
				width: true,
				height: true
			});

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "medium.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "caja");
			attr_dev(img, "width", "70");
			attr_dev(img, "height", "70");
			add_location(img, file$1, 18, 32, 739);
			attr_dev(span, "slot", "cardImage");
			add_location(span, file$1, 18, 8, 715);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, img);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardImage_slot_1.name,
		type: "slot",
		source: "(19:8) <span slot=\\\"cardImage\\\">",
		ctx
	});

	return block;
}

// (20:8) <span slot="cardTitle">
function create_cardTitle_slot_1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Tienda M");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Tienda M");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardTitle");
			add_location(span, file$1, 19, 8, 813);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardTitle_slot_1.name,
		type: "slot",
		source: "(20:8) <span slot=\\\"cardTitle\\\">",
		ctx
	});

	return block;
}

// (21:8) <span slot="cardPharagraph">
function create_cardPharagraph_slot_1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Lorem ipsum dolor sit amet consectetur, adipisicing elit. Laborum\n            natus ut animi qui ab? Culpa excepturi doloremque accusamus beatae\n            qui, odio est repudiandae vitae aperiam cumque tenetur hic neque\n            obcaecati.");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Laborum\n            natus ut animi qui ab? Culpa excepturi doloremque accusamus beatae\n            qui, odio est repudiandae vitae aperiam cumque tenetur hic neque\n            obcaecati.");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardPharagraph");
			add_location(span, file$1, 20, 8, 860);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardPharagraph_slot_1.name,
		type: "slot",
		source: "(21:8) <span slot=\\\"cardPharagraph\\\">",
		ctx
	});

	return block;
}

// (26:8) <span slot="cardButtom">
function create_cardButtom_slot_1(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Comprar");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Comprar");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardButtom");
			add_location(span, file$1, 25, 8, 1161);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardButtom_slot_1.name,
		type: "slot",
		source: "(26:8) <span slot=\\\"cardButtom\\\">",
		ctx
	});

	return block;
}

// (18:4) <Card>
function create_default_slot_1(ctx) {
	let t0;
	let t1;
	let t2;

	const block = {
		c: function create() {
			t0 = space();
			t1 = space();
			t2 = space();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			t1 = claim_space(nodes);
			t2 = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(t2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(18:4) <Card>",
		ctx
	});

	return block;
}

// (29:8) <span slot="cardImage">
function create_cardImage_slot(ctx) {
	let span;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			span = element("span");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);

			img = claim_element(span_nodes, "IMG", {
				src: true,
				alt: true,
				width: true,
				height: true
			});

			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = "large.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "caja");
			attr_dev(img, "width", "70");
			attr_dev(img, "height", "70");
			add_location(img, file$1, 28, 32, 1255);
			attr_dev(span, "slot", "cardImage");
			add_location(span, file$1, 28, 8, 1231);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, img);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardImage_slot.name,
		type: "slot",
		source: "(29:8) <span slot=\\\"cardImage\\\">",
		ctx
	});

	return block;
}

// (30:8) <span slot="cardTitle">
function create_cardTitle_slot(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Tienda L");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Tienda L");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardTitle");
			add_location(span, file$1, 29, 8, 1328);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardTitle_slot.name,
		type: "slot",
		source: "(30:8) <span slot=\\\"cardTitle\\\">",
		ctx
	});

	return block;
}

// (31:8) <span slot="cardPharagraph">
function create_cardPharagraph_slot(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Lorem ipsum dolor sit amet consectetur, adipisicing elit. Laborum\n            natus ut animi qui ab? Culpa excepturi doloremque accusamus beatae\n            qui, odio est repudiandae vitae aperiam cumque tenetur hic neque\n            obcaecati.");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Laborum\n            natus ut animi qui ab? Culpa excepturi doloremque accusamus beatae\n            qui, odio est repudiandae vitae aperiam cumque tenetur hic neque\n            obcaecati.");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardPharagraph");
			add_location(span, file$1, 30, 8, 1375);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardPharagraph_slot.name,
		type: "slot",
		source: "(31:8) <span slot=\\\"cardPharagraph\\\">",
		ctx
	});

	return block;
}

// (36:8) <span slot="cardButtom">
function create_cardButtom_slot(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text("Cotizar");
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { slot: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, "Cotizar");
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "slot", "cardButtom");
			add_location(span, file$1, 35, 8, 1676);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_cardButtom_slot.name,
		type: "slot",
		source: "(36:8) <span slot=\\\"cardButtom\\\">",
		ctx
	});

	return block;
}

// (28:4) <Card>
function create_default_slot(ctx) {
	let t0;
	let t1;
	let t2;

	const block = {
		c: function create() {
			t0 = space();
			t1 = space();
			t2 = space();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			t1 = claim_space(nodes);
			t2 = claim_space(nodes);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(t2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(28:4) <Card>",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let t0;
	let t1;
	let current;

	const card0 = new Card({
			props: {
				$$slots: {
					default: [create_default_slot_2],
					cardButtom: [create_cardButtom_slot_2],
					cardPharagraph: [create_cardPharagraph_slot_2],
					cardTitle: [create_cardTitle_slot_2],
					cardImage: [create_cardImage_slot_2]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const card1 = new Card({
			props: {
				$$slots: {
					default: [create_default_slot_1],
					cardButtom: [create_cardButtom_slot_1],
					cardPharagraph: [create_cardPharagraph_slot_1],
					cardTitle: [create_cardTitle_slot_1],
					cardImage: [create_cardImage_slot_1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const card2 = new Card({
			props: {
				$$slots: {
					default: [create_default_slot],
					cardButtom: [create_cardButtom_slot],
					cardPharagraph: [create_cardPharagraph_slot],
					cardTitle: [create_cardTitle_slot],
					cardImage: [create_cardImage_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(card0.$$.fragment);
			t0 = space();
			create_component(card1.$$.fragment);
			t1 = space();
			create_component(card2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(card0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(card1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(card2.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "grid md:grid-cols-3 gap-4 rounded-bl place-items-center m-4 rounded-3xl shadow-lg mt-20 mb-36");
			add_location(div, file$1, 5, 0, 67);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(card0, div, null);
			append_dev(div, t0);
			mount_component(card1, div, null);
			append_dev(div, t1);
			mount_component(card2, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card0_changes.$$scope = { dirty, ctx };
			}

			card0.$set(card0_changes);
			const card1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card1_changes.$$scope = { dirty, ctx };
			}

			card1.$set(card1_changes);
			const card2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				card2_changes.$$scope = { dirty, ctx };
			}

			card2.$set(card2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card0.$$.fragment, local);
			transition_in(card1.$$.fragment, local);
			transition_in(card2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card0.$$.fragment, local);
			transition_out(card1.$$.fragment, local);
			transition_out(card2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(card0);
			destroy_component(card1);
			destroy_component(card2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Cards> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Cards", $$slots, []);
	$$self.$capture_state = () => ({ Card });
	return [];
}

class Cards extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Cards",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src/components/Whatsapp.svelte generated by Svelte v3.22.2 */

const file$2 = "src/components/Whatsapp.svelte";

function create_fragment$2(ctx) {
	let div2;
	let div0;
	let h3;
	let span0;
	let t0;
	let t1;
	let br;
	let t2;
	let span1;
	let t3;
	let t4;
	let span2;
	let t5;
	let t6;
	let span3;
	let t7;
	let t8;
	let t9;
	let div1;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			h3 = element("h3");
			span0 = element("span");
			t0 = text("Hey emprendedor!!!");
			t1 = space();
			br = element("br");
			t2 = text("Con esta mini tienda tendrás seguridad, backups, Whatsapp y Mercado Pago  integrado \n            y muchas otras características, pero si estás buscando\n            ");
			span1 = element("span");
			t3 = text("vender en internet");
			t4 = space();
			span2 = element("span");
			t5 = text("COMO UN PROFESIONAL");
			t6 = text(" encontrá abajo ");
			span3 = element("span");
			t7 = text("El plan");
			t8 = text("\n            que mejor se adapte a tus necesidades o hacé click en el\n            logo y escibirnos...");
			t9 = space();
			div1 = element("div");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h3 = claim_element(div0_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			span0 = claim_element(h3_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t0 = claim_text(span0_nodes, "Hey emprendedor!!!");
			span0_nodes.forEach(detach_dev);
			t1 = claim_space(h3_nodes);
			br = claim_element(h3_nodes, "BR", {});
			t2 = claim_text(h3_nodes, "Con esta mini tienda tendrás seguridad, backups, Whatsapp y Mercado Pago  integrado \n            y muchas otras características, pero si estás buscando\n            ");
			span1 = claim_element(h3_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t3 = claim_text(span1_nodes, "vender en internet");
			span1_nodes.forEach(detach_dev);
			t4 = claim_space(h3_nodes);
			span2 = claim_element(h3_nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			t5 = claim_text(span2_nodes, "COMO UN PROFESIONAL");
			span2_nodes.forEach(detach_dev);
			t6 = claim_text(h3_nodes, " encontrá abajo ");
			span3 = claim_element(h3_nodes, "SPAN", { class: true });
			var span3_nodes = children(span3);
			t7 = claim_text(span3_nodes, "El plan");
			span3_nodes.forEach(detach_dev);
			t8 = claim_text(h3_nodes, "\n            que mejor se adapte a tus necesidades o hacé click en el\n            logo y escibirnos...");
			h3_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t9 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			img = claim_element(div1_nodes, "IMG", { class: true, src: true, alt: true });
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span0, "class", "font-bold text-2xl  ");
			add_location(span0, file$2, 13, 12, 319);
			add_location(br, file$2, 14, 12, 392);
			attr_dev(span1, "class", "font-bold");
			add_location(span1, file$2, 16, 12, 562);
			attr_dev(span2, "class", "font-bold ");
			add_location(span2, file$2, 17, 12, 625);
			attr_dev(span3, "class", "font-bold");
			add_location(span3, file$2, 17, 80, 693);
			attr_dev(h3, "class", "text-sm text-gray-700");
			add_location(h3, file$2, 12, 8, 272);
			attr_dev(div0, "class", "p-4 col-span-2");
			add_location(div0, file$2, 11, 4, 235);
			attr_dev(img, "class", "wsp object-fill svelte-vnq8fq");
			if (img.src !== (img_src_value = "wsp2.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "logo whatsapp");
			add_location(img, file$2, 23, 8, 908);
			attr_dev(div1, "class", "grid col-start-3  mr-2");
			add_location(div1, file$2, 22, 4, 863);
			attr_dev(div2, "class", "grid md:grid-cols-3 bg-green-200 gap-4 rounded-bl place-items-center m-4 rounded-3xl");
			add_location(div2, file$2, 9, 0, 128);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div0, h3);
			append_dev(h3, span0);
			append_dev(span0, t0);
			append_dev(h3, t1);
			append_dev(h3, br);
			append_dev(h3, t2);
			append_dev(h3, span1);
			append_dev(span1, t3);
			append_dev(h3, t4);
			append_dev(h3, span2);
			append_dev(span2, t5);
			append_dev(h3, t6);
			append_dev(h3, span3);
			append_dev(span3, t7);
			append_dev(h3, t8);
			append_dev(div2, t9);
			append_dev(div2, div1);
			append_dev(div1, img);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Whatsapp> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Whatsapp", $$slots, []);
	return [];
}

class Whatsapp extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Whatsapp",
			options,
			id: create_fragment$2.name
		});
	}
}

/* src/components/Hero.svelte generated by Svelte v3.22.2 */

const file$3 = "src/components/Hero.svelte";

function create_fragment$3(ctx) {
	let div2;
	let div1;
	let h1;
	let t0;
	let br0;
	let span0;
	let t1;
	let t2;
	let br1;
	let span1;
	let t3;
	let t4;
	let br2;
	let span2;
	let t5;
	let t6;
	let br3;
	let t7;
	let span3;
	let t8;
	let t9;
	let p;
	let t10;
	let t11;
	let div0;
	let button;
	let t12;

	const block = {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			h1 = element("h1");
			t0 = text("Creá tu tienda ");
			br0 = element("br");
			span0 = element("span");
			t1 = text("on line");
			t2 = text(" hoy por\n            ");
			br1 = element("br");
			span1 = element("span");
			t3 = text("solo");
			t4 = space();
			br2 = element("br");
			span2 = element("span");
			t5 = text("$ 5000");
			t6 = space();
			br3 = element("br");
			t7 = space();
			span3 = element("span");
			t8 = text("Por única vez");
			t9 = space();
			p = element("p");
			t10 = text("*Oferta válida por 48 hs, el costo de alojamiento mensual mínimo es\n            de $500.");
			t11 = space();
			div0 = element("div");
			button = element("button");
			t12 = text("Comprar");
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h1 = claim_element(div1_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Creá tu tienda ");
			br0 = claim_element(h1_nodes, "BR", {});
			span0 = claim_element(h1_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			t1 = claim_text(span0_nodes, "on line");
			span0_nodes.forEach(detach_dev);
			t2 = claim_text(h1_nodes, " hoy por\n            ");
			br1 = claim_element(h1_nodes, "BR", {});
			span1 = claim_element(h1_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			t3 = claim_text(span1_nodes, "solo");
			span1_nodes.forEach(detach_dev);
			t4 = claim_space(h1_nodes);
			br2 = claim_element(h1_nodes, "BR", {});
			span2 = claim_element(h1_nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			t5 = claim_text(span2_nodes, "$ 5000");
			span2_nodes.forEach(detach_dev);
			t6 = claim_space(h1_nodes);
			br3 = claim_element(h1_nodes, "BR", {});
			t7 = claim_space(h1_nodes);
			span3 = claim_element(h1_nodes, "SPAN", { class: true });
			var span3_nodes = children(span3);
			t8 = claim_text(span3_nodes, "Por única vez");
			span3_nodes.forEach(detach_dev);
			h1_nodes.forEach(detach_dev);
			t9 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", { class: true });
			var p_nodes = children(p);
			t10 = claim_text(p_nodes, "*Oferta válida por 48 hs, el costo de alojamiento mensual mínimo es\n            de $500.");
			p_nodes.forEach(detach_dev);
			t11 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			button = claim_element(div0_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t12 = claim_text(button_nodes, "Comprar");
			button_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(br0, file$3, 5, 27, 257);
			attr_dev(span0, "class", "text-blue-500");
			add_location(span0, file$3, 5, 31, 261);
			add_location(br1, file$3, 6, 12, 324);
			attr_dev(span1, "class", "underline");
			add_location(span1, file$3, 6, 18, 330);
			add_location(br2, file$3, 7, 12, 380);
			attr_dev(span2, "class", "text-green-500");
			add_location(span2, file$3, 7, 18, 386);
			add_location(br3, file$3, 8, 12, 442);
			attr_dev(span3, "class", "underline font-bold");
			add_location(span3, file$3, 9, 12, 461);
			attr_dev(h1, "class", "font-sans-Roboto font-bold text-center text-purple-500 text-4xl md:text-6xl mt-4 ");
			add_location(h1, file$3, 3, 8, 123);
			attr_dev(p, "class", " text-blue-500 font-bold text-center mt-4");
			add_location(p, file$3, 11, 8, 539);
			attr_dev(button, "class", "  w-64  mt-4 mb-4  ring ring-purple-600 ring-offset-4 ring-offset-purple-100 hover:text-gray-50 transition duration-500 ease-in-out bg-gradient-to-r from-pink-500 to-yellow-500 transform hover:-translate-y-1 hover:scale-110 font-bold py-2 px-4 rounded-xl m-2");
			add_location(button, file$3, 16, 12, 771);
			attr_dev(div0, "class", "grid justify-center mt-8 mb-8");
			add_location(div0, file$3, 15, 8, 715);
			attr_dev(div1, "class", " mb-8");
			add_location(div1, file$3, 2, 4, 95);
			attr_dev(div2, "class", " gap-4 ml-8 mr-8 mb-10 mt-4 grid-cols-1 rounded-bl shadow-lg bg-gray-100");
			add_location(div2, file$3, 0, 0, 0);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, h1);
			append_dev(h1, t0);
			append_dev(h1, br0);
			append_dev(h1, span0);
			append_dev(span0, t1);
			append_dev(h1, t2);
			append_dev(h1, br1);
			append_dev(h1, span1);
			append_dev(span1, t3);
			append_dev(h1, t4);
			append_dev(h1, br2);
			append_dev(h1, span2);
			append_dev(span2, t5);
			append_dev(h1, t6);
			append_dev(h1, br3);
			append_dev(h1, t7);
			append_dev(h1, span3);
			append_dev(span3, t8);
			append_dev(div1, t9);
			append_dev(div1, p);
			append_dev(p, t10);
			append_dev(div1, t11);
			append_dev(div1, div0);
			append_dev(div0, button);
			append_dev(button, t12);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Hero> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Hero", $$slots, []);
	return [];
}

class Hero extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Hero",
			options,
			id: create_fragment$3.name
		});
	}
}

/* src/components/Features.svelte generated by Svelte v3.22.2 */

const file$4 = "src/components/Features.svelte";

function create_fragment$4(ctx) {
	let div1;
	let div0;
	let h2;
	let span;
	let t0;
	let t1;
	let br;
	let t2;
	let t3;
	let ul;
	let li0;
	let b0;
	let t4;
	let t5;
	let t6;
	let li1;
	let b1;
	let t7;
	let t8;
	let t9;
	let li2;
	let b2;
	let t10;
	let t11;
	let t12;
	let li3;
	let b3;
	let t13;
	let t14;
	let t15;
	let li4;
	let b4;
	let t16;
	let t17;
	let t18;
	let li5;
	let b5;
	let t19;
	let t20;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			h2 = element("h2");
			span = element("span");
			t0 = text("NO LA PIENSES MAS");
			t1 = space();
			br = element("br");
			t2 = text(" Por menos de lo que cuesta una zapatilla obtenés...");
			t3 = space();
			ul = element("ul");
			li0 = element("li");
			b0 = element("b");
			t4 = text("Dominio");
			t5 = text(" pago por un año");
			t6 = space();
			li1 = element("li");
			b1 = element("b");
			t7 = text("Seguridad");
			t8 = text(" mediante certificados SSL");
			t9 = space();
			li2 = element("li");
			b2 = element("b");
			t10 = text("Whatsapp");
			t11 = text(" integrado");
			t12 = space();
			li3 = element("li");
			b3 = element("b");
			t13 = text("Hasta 10");
			t14 = text(" productos o servicios");
			t15 = space();
			li4 = element("li");
			b4 = element("b");
			t16 = text("Mercado Pago");
			t17 = text(" integrado");
			t18 = space();
			li5 = element("li");
			b5 = element("b");
			t19 = text("Redes Sociales");
			t20 = text(" integradas");
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", {});
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h2 = claim_element(div0_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			span = claim_element(h2_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "NO LA PIENSES MAS");
			span_nodes.forEach(detach_dev);
			t1 = claim_space(h2_nodes);
			br = claim_element(h2_nodes, "BR", {});
			t2 = claim_text(h2_nodes, " Por menos de lo que cuesta una zapatilla obtenés...");
			h2_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			ul = claim_element(div0_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", {});
			var li0_nodes = children(li0);
			b0 = claim_element(li0_nodes, "B", { class: true });
			var b0_nodes = children(b0);
			t4 = claim_text(b0_nodes, "Dominio");
			b0_nodes.forEach(detach_dev);
			t5 = claim_text(li0_nodes, " pago por un año");
			li0_nodes.forEach(detach_dev);
			t6 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			b1 = claim_element(li1_nodes, "B", { class: true });
			var b1_nodes = children(b1);
			t7 = claim_text(b1_nodes, "Seguridad");
			b1_nodes.forEach(detach_dev);
			t8 = claim_text(li1_nodes, " mediante certificados SSL");
			li1_nodes.forEach(detach_dev);
			t9 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", {});
			var li2_nodes = children(li2);
			b2 = claim_element(li2_nodes, "B", { class: true });
			var b2_nodes = children(b2);
			t10 = claim_text(b2_nodes, "Whatsapp");
			b2_nodes.forEach(detach_dev);
			t11 = claim_text(li2_nodes, " integrado");
			li2_nodes.forEach(detach_dev);
			t12 = claim_space(ul_nodes);
			li3 = claim_element(ul_nodes, "LI", {});
			var li3_nodes = children(li3);
			b3 = claim_element(li3_nodes, "B", { class: true });
			var b3_nodes = children(b3);
			t13 = claim_text(b3_nodes, "Hasta 10");
			b3_nodes.forEach(detach_dev);
			t14 = claim_text(li3_nodes, " productos o servicios");
			li3_nodes.forEach(detach_dev);
			t15 = claim_space(ul_nodes);
			li4 = claim_element(ul_nodes, "LI", {});
			var li4_nodes = children(li4);
			b4 = claim_element(li4_nodes, "B", { class: true });
			var b4_nodes = children(b4);
			t16 = claim_text(b4_nodes, "Mercado Pago");
			b4_nodes.forEach(detach_dev);
			t17 = claim_text(li4_nodes, " integrado");
			li4_nodes.forEach(detach_dev);
			t18 = claim_space(ul_nodes);
			li5 = claim_element(ul_nodes, "LI", {});
			var li5_nodes = children(li5);
			b5 = claim_element(li5_nodes, "B", { class: true });
			var b5_nodes = children(b5);
			t19 = claim_text(b5_nodes, "Redes Sociales");
			b5_nodes.forEach(detach_dev);
			t20 = claim_text(li5_nodes, " integradas");
			li5_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "text-green-500");
			add_location(span, file$4, 8, 12, 177);
			add_location(br, file$4, 8, 66, 231);
			attr_dev(h2, "class", "text-blue-600 font-bold font-size-lg text-2xl mb-4");
			add_location(h2, file$4, 7, 8, 100);
			attr_dev(b0, "class", "text-indigo-600");
			add_location(b0, file$4, 10, 16, 356);
			add_location(li0, file$4, 10, 12, 352);
			attr_dev(b1, "class", "text-indigo-600");
			add_location(b1, file$4, 11, 16, 433);
			add_location(li1, file$4, 11, 12, 429);
			attr_dev(b2, "class", "text-indigo-600");
			add_location(b2, file$4, 12, 16, 521);
			add_location(li2, file$4, 12, 12, 517);
			attr_dev(b3, "class", "text-indigo-600");
			add_location(b3, file$4, 13, 16, 593);
			add_location(li3, file$4, 13, 12, 589);
			attr_dev(b4, "class", "text-indigo-600");
			add_location(b4, file$4, 14, 16, 677);
			add_location(li4, file$4, 14, 12, 673);
			attr_dev(b5, "class", "text-indigo-600");
			add_location(b5, file$4, 15, 16, 753);
			add_location(li5, file$4, 15, 12, 749);
			attr_dev(ul, "class", "list-disc text-indigo-600");
			add_location(ul, file$4, 9, 8, 301);
			attr_dev(div0, "class", "grid place-items-center shadow-lg m-8 p-4 ");
			add_location(div0, file$4, 6, 4, 35);
			add_location(div1, file$4, 5, 0, 25);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, h2);
			append_dev(h2, span);
			append_dev(span, t0);
			append_dev(h2, t1);
			append_dev(h2, br);
			append_dev(h2, t2);
			append_dev(div0, t3);
			append_dev(div0, ul);
			append_dev(ul, li0);
			append_dev(li0, b0);
			append_dev(b0, t4);
			append_dev(li0, t5);
			append_dev(ul, t6);
			append_dev(ul, li1);
			append_dev(li1, b1);
			append_dev(b1, t7);
			append_dev(li1, t8);
			append_dev(ul, t9);
			append_dev(ul, li2);
			append_dev(li2, b2);
			append_dev(b2, t10);
			append_dev(li2, t11);
			append_dev(ul, t12);
			append_dev(ul, li3);
			append_dev(li3, b3);
			append_dev(b3, t13);
			append_dev(li3, t14);
			append_dev(ul, t15);
			append_dev(ul, li4);
			append_dev(li4, b4);
			append_dev(b4, t16);
			append_dev(li4, t17);
			append_dev(ul, t18);
			append_dev(ul, li5);
			append_dev(li5, b5);
			append_dev(b5, t19);
			append_dev(li5, t20);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Features> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Features", $$slots, []);
	return [];
}

class Features extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Features",
			options,
			id: create_fragment$4.name
		});
	}
}

/* src/routes/index.svelte generated by Svelte v3.22.2 */

function create_fragment$5(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const hero = new Hero({ $$inline: true });
	const features = new Features({ $$inline: true });
	const whatsapp = new Whatsapp({ $$inline: true });
	const cards = new Cards({ $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			create_component(hero.$$.fragment);
			t1 = space();
			create_component(features.$$.fragment);
			t2 = space();
			create_component(whatsapp.$$.fragment);
			t3 = space();
			create_component(cards.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-v57o8a\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			claim_component(hero.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(features.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(whatsapp.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(cards.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Oferta página web";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			mount_component(hero, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(features, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(whatsapp, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(cards, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(hero.$$.fragment, local);
			transition_in(features.$$.fragment, local);
			transition_in(whatsapp.$$.fragment, local);
			transition_in(cards.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(hero.$$.fragment, local);
			transition_out(features.$$.fragment, local);
			transition_out(whatsapp.$$.fragment, local);
			transition_out(cards.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			destroy_component(hero, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(features, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(whatsapp, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(cards, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);
	$$self.$capture_state = () => ({ Cards, Whatsapp, Hero, Features });
	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$5.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNDc3NmZlNWEuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
