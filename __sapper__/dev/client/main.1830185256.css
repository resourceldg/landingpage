h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}
ul.svelte-d08w6i,p.svelte-d08w6i{margin:0 0 1em 0;line-height:1.5}.main-title.svelte-d08w6i{font-size:25px}
.content.svelte-gnxal1 h2{font-size:1.4em;font-weight:500}.content.svelte-gnxal1 pre{background-color:#f9f9f9;box-shadow:inset 1px 1px 5px rgba(0,0,0,0.05);padding:0.5em;border-radius:2px;overflow-x:auto}.content.svelte-gnxal1 pre code{background-color:transparent;padding:0}.content.svelte-gnxal1 ul{line-height:1.5}.content.svelte-gnxal1 li{margin:0 0 0.5em 0}
nav.svelte-a7vsxu{border-bottom:1px solid rgba(21, 10, 34, 0.1);font-weight:400;padding:0 1em}ul.svelte-a7vsxu{margin:0;padding:0}ul.svelte-a7vsxu::after{content:'';display:block;clear:both}li.svelte-a7vsxu{display:block;float:left}li.svelte-a7vsxu:active{color:aqua}a.svelte-a7vsxu{text-decoration:none;padding:1em 0.5em;display:block}b.svelte-a7vsxu{padding-right:3em}
.wsp.svelte-vnq8fq{transition:0.3s ease-out}.wsp.svelte-vnq8fq:hover{transform:rotate(360deg)}
.wsp.svelte-vnq8fq{transition:0.3s ease-out}.wsp.svelte-vnq8fq:hover{transform:rotate(360deg)}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */