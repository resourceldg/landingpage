(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1610090875326;

	const files = [
		"service-worker-index.html",
		"admin_panel_settings-24px.svg",
		"astronautita.jpg",
		"award-solid.svg",
		"backup-24px.svg",
		"bird-bg.png",
		"book.png",
		"camera-retro-solid.svg",
		"cash-register-solid.svg",
		"discourse-brands.svg",
		"facebook-24px.svg",
		"favicon.png",
		"fonts/Roboto-Black.ttf",
		"fonts/Roboto-BlackItalic.ttf",
		"fonts/Roboto-Bold.ttf",
		"fonts/Roboto-BoldItalic.ttf",
		"fonts/Roboto-Italic.ttf",
		"fonts/Roboto-Light.ttf",
		"fonts/Roboto-LightItalic.ttf",
		"fonts/Roboto-Medium.ttf",
		"fonts/Roboto-MediumItalic.ttf",
		"fonts/Roboto-Regular.ttf",
		"fonts/Roboto-Thin.ttf",
		"fonts/Roboto-ThinItalic.ttf",
		"global.css",
		"landmark-solid.svg",
		"large.svg",
		"lightbulb-regular.svg",
		"logo-192.png",
		"logo-512.png",
		"loyalty-24px.svg",
		"main.css",
		"manifest.json",
		"medium.svg",
		"menu.png",
		"menuu.png",
		"monetization_on-24px.svg",
		"paper.png",
		"policy-24px.svg",
		"qrscan.png",
		"question_answer-24px.svg",
		"rocket-solid.svg",
		"search-dollar-solid (1).svg",
		"security-24px.svg",
		"small.svg",
		"storefront-24px.svg",
		"tailwind.css",
		"wps.png",
		"wsp2.png",
		"wsp20.png",
		"wsp2020.png"
	];

	const shell = [
		"client/client.25a26370.js",
		"client/index.a5d1096a.js",
		"client/index.25f8fcca.js",
		"client/[slug].33cec346.js",
		"client/profile.4315718a.js",
		"client/signup.95674be4.js",
		"client/about.b7cba570.js",
		"client/carta.5e650e69.js",
		"client/login.af49291f.js",
		"client/sapper-dev-client.89e34bae.js",
		"client/client.4cbf4e38.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
	    event.waitUntil(
	        caches
	            .open(ASSETS)
	            .then(cache => cache.addAll(to_cache))
	            .then(() => {
	                self.skipWaiting();
	            }),
	    );
	});

	self.addEventListener('activate', event => {
	    event.waitUntil(
	        caches.keys().then(async keys => {
	            // delete old caches
	            for (const key of keys) {
	                if (key !== ASSETS) await caches.delete(key);
	            }

	            self.clients.claim();
	        }),
	    );
	});

	self.addEventListener('fetch', event => {
	    if (event.request.method !== 'GET' || event.request.headers.has('range'))
	        return;

	    const url = new URL(event.request.url);

	    // don't try to handle e.g. data: URIs
	    if (!url.protocol.startsWith('http')) return;

	    // ignore dev server requests
	    if (
	        url.hostname === self.location.hostname &&
	        url.port !== self.location.port
	    )
	        return;

	    // always serve static files and bundler-generated assets from cache
	    if (url.host === self.location.host && cached.has(url.pathname)) {
	        event.respondWith(caches.match(event.request));
	        return;
	    }

	    // for pages, you might want to serve a shell `service-worker-index.html` file,
	    // which Sapper has generated for you. It's not right for every
	    // app, but if it's right for yours then uncomment this section
	    /*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

	    if (event.request.cache === 'only-if-cached') return;

	    // for everything else, try the network first, falling back to
	    // cache if the user is offline. (If the pages never change, you
	    // might prefer a cache-first approach to a network-first one.)
	    event.respondWith(
	        caches.open(`offline${timestamp}`).then(async cache => {
	            try {
	                const response = await fetch(event.request);
	                cache.put(event.request, response.clone());
	                return response;
	            } catch (err) {
	                const response = await cache.match(event.request);
	                if (response) return response;

	                throw err;
	            }
	        }),
	    );
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
